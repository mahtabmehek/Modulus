name: Frontend Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tailwind.config.js'
      - '.github/workflows/frontend-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Get API Gateway URL
      run: |
        API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`modulus-api`].id' --output text)
        if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
          echo "⚠️  API Gateway not found, using fallback URL"
          echo "NEXT_PUBLIC_API_URL=https://api.modulus.com/api" >> $GITHUB_ENV
        else
          echo "✅ Found API Gateway with ID: $API_ID"
          API_URL="https://$API_ID.execute-api.eu-west-2.amazonaws.com/prod/api"
          echo "NEXT_PUBLIC_API_URL=$API_URL" >> $GITHUB_ENV
          echo "API_GATEWAY_URL=$API_URL" >> $GITHUB_ENV
          
          # Test API health before building
          echo "Testing API health..."
          if curl -f -s "$API_URL/health" >/dev/null 2>&1; then
            echo "✅ API health check passed"
          else
            echo "⚠️  API health check failed, but continuing with build"
          fi
        fi

    - name: Build frontend
      run: |
        echo "Building with API URL: $NEXT_PUBLIC_API_URL"
        npm run build
        
        # Check if build was successful
        if [ ! -d "out" ]; then
          echo "❌ Build failed - no 'out' directory found"
          exit 1
        fi
        
        echo "✅ Build successful"
        ls -la out/

    - name: Create or get S3 bucket
      run: |
        BUCKET_NAME="modulus-frontend-$(date +%s)"
        
        # Check if bucket exists
        if aws s3api head-bucket --bucket modulus-frontend-1752085873 2>/dev/null; then
          echo "Using existing bucket: modulus-frontend-1752085873"
          echo "BUCKET_NAME=modulus-frontend-1752085873" >> $GITHUB_ENV
        else
          echo "Creating new bucket: $BUCKET_NAME"
          aws s3api create-bucket \
            --bucket $BUCKET_NAME \
            --region eu-west-2 \
            --create-bucket-configuration LocationConstraint=eu-west-2
          
          # Configure bucket for static website hosting
          aws s3api put-bucket-website \
            --bucket $BUCKET_NAME \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "404.html"}
            }'
          
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        fi

    - name: Configure S3 bucket permissions
      run: |
        # Remove public access block
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
        
        # Apply bucket policy for public read access
        aws s3api put-bucket-policy \
          --bucket $BUCKET_NAME \
          --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
              }
            ]
          }'

    - name: Deploy to S3
      run: |
        echo "Deploying to S3 bucket: $BUCKET_NAME"
        aws s3 sync out/ s3://$BUCKET_NAME --delete --region eu-west-2
        
        # List uploaded files for verification
        echo "Files uploaded to S3:"
        aws s3 ls s3://$BUCKET_NAME --recursive | head -20

    - name: Test deployment
      run: |
        echo "Testing frontend deployment..."
        
        # Test S3 website endpoint
        echo "Testing S3 website endpoint..."
        WEBSITE_URL="http://$BUCKET_NAME.s3-website.eu-west-2.amazonaws.com"
        
        # Wait for propagation
        sleep 10
        
        if curl -f -s "$WEBSITE_URL" | grep -q "ModulusLMS"; then
          echo "✅ S3 website test passed"
        else
          echo "⚠️  S3 website test failed, but deployment may still be valid"
        fi
        
        # Test API connectivity from frontend
        if [ -n "$API_GATEWAY_URL" ]; then
          echo "Testing API connectivity..."
          curl -f -s "$API_GATEWAY_URL/health" | jq . || echo "⚠️  API connectivity test failed"
        fi
        
        echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV

    - name: Test registration functionality
      run: |
        echo "Testing registration endpoint integration..."
        if [ -n "$API_GATEWAY_URL" ]; then
          # Test student registration (should work)
          curl -X POST "$API_GATEWAY_URL/auth/register" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test Student",
              "email": "test.student@university.edu", 
              "password": "testpassword123",
              "role": "student",
              "accessCode": "STUDENT2024"
            }' || echo "⚠️  Student registration test failed"
          
          # Test login endpoint
          curl -X POST "$API_GATEWAY_URL/auth/login" \
            -H "Content-Type: application/json" \
            -d '{
              "email": "admin@modulus.edu",
              "password": "admin123"
            }' || echo "⚠️  Admin login test failed"
        fi

    - name: Output deployment info
      run: |
        echo "🚀 Frontend deployment completed!"
        echo "📦 S3 Bucket: $BUCKET_NAME"
        echo "🌐 Website URL: $WEBSITE_URL"
        echo "🔗 API URL: $NEXT_PUBLIC_API_URL"
        echo ""
        echo "Frontend features deployed:"
        echo "✅ Updated registration with role-specific access codes"
        echo "✅ Fixed profile page for new users"
        echo "✅ Admin dashboard with real user data"
        echo "✅ Course management functionality"
        echo "✅ User approval workflow"
