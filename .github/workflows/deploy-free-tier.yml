# Complete Modulus LMS Deployment with Labs & Domain
# Deploys everything: App + User Labs + Database + Domain Setup

name: 🚀 Deploy Modulus LMS (Complete)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOMAIN_NAME: mahtabmehek.tech
  APP_SUBDOMAIN: modulus
  LABS_SUBDOMAIN: labs
  ECR_REPOSITORY: modulus-lms
  ECS_CLUSTER: modulus-cluster
  ECS_SERVICE: modulus-service
  LABS_ECS_SERVICE: modulus-labs-service

jobs:
  setup-infrastructure:
    name: 🏗️ Setup AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      app-url: ${{ steps.setup.outputs.app-url }}
      labs-url: ${{ steps.setup.outputs.labs-url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Complete Infrastructure
      id: setup
      run: |
        # Make setup script executable
        chmod +x ./deploy-complete.sh
        
        # Run complete setup with domain
        ./deploy-complete.sh
        
        # Output URLs
        echo "app-url=https://${{ env.APP_SUBDOMAIN }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_OUTPUT
        echo "labs-url=https://${{ env.LABS_SUBDOMAIN }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: 🚀 Build & Deploy Apps
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🔐 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 🏗️ Build Main App Image
      id: build-app
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build main app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "app-image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 🧪 Build Labs Environment Image
      id: build-labs
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build labs environment (Kali Linux based)
        docker build -f Dockerfile.labs -t $ECR_REGISTRY/modulus-labs:$IMAGE_TAG .
        docker push $ECR_REGISTRY/modulus-labs:$IMAGE_TAG
        echo "labs-image=$ECR_REGISTRY/modulus-labs:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: � Deploy Main Application
      run: |
        # Update and deploy main app
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --task-definition modulus-app-task

    - name: 🧪 Deploy Labs Environment
      run: |
        # Update and deploy labs
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.LABS_ECS_SERVICE }} \
          --force-new-deployment \
          --task-definition modulus-labs-task

    - name: ⏳ Wait for Deployment
      run: |
        echo "Waiting for main app deployment..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
          
        echo "Waiting for labs deployment..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.LABS_ECS_SERVICE }}

    - name: 🌐 Update DNS Records
      run: |
        # Get Load Balancer DNS
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names modulus-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
          
        LABS_ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names modulus-labs-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)

        # Update Route 53 records
        ./update-dns.sh "$ALB_DNS" "$LABS_ALB_DNS"

    - name: ✅ Deployment Complete
      run: |
        echo "## 🎉 Modulus LMS Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Access Your Application:" >> $GITHUB_STEP_SUMMARY
        echo "- **Main App**: https://${{ env.APP_SUBDOMAIN }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Labs Environment**: https://${{ env.LABS_SUBDOMAIN }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Features Deployed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Complete LMS Platform" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Interactive Labs Environment" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ User Management System" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ AWS Infrastructure Monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Custom Domain with SSL" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Auto-scaling and Load Balancing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 Ready for production use!"