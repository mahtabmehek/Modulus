name: Modulus Frontend Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tailwind.config.js'
      - '.github/workflows/modulus-frontend-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  S3_BUCKET_NAME: modulus-frontend-production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get API Gateway URL
      run: |
        echo "🔍 Looking for API Gateway..."
        API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`modulus-api`].id' --output text)
        
        if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
          echo "⚠️  API Gateway not found"
          echo "Using fallback API URL for build"
          echo "NEXT_PUBLIC_API_URL=https://api.modulus.com/api" >> $GITHUB_ENV
        else
          echo "✅ Found API Gateway with ID: $API_ID"
          API_URL="https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/prod/api"
          echo "NEXT_PUBLIC_API_URL=$API_URL" >> $GITHUB_ENV
          
          # Test API health before building
          echo "🏥 Testing API health..."
          if curl -f -s "$API_URL/health" >/dev/null 2>&1; then
            echo "✅ API health check passed"
          else
            echo "⚠️  API health check failed, but continuing with build"
          fi
        fi

    - name: Build frontend
      run: |
        echo "🏗️  Building frontend with API URL: $NEXT_PUBLIC_API_URL"
        npm run build
        
        if [ ! -d "out" ]; then
          echo "❌ Build failed - no 'out' directory found"
          exit 1
        fi
        
        echo "✅ Build successful"
        echo "📦 Build output size: $(du -sh out)"
        echo "📁 Generated files:"
        find out -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

    - name: Deploy to S3
      run: |
        echo "🚀 Deploying to S3..."
        
        # Check if bucket exists
        if aws s3api head-bucket --bucket $S3_BUCKET_NAME 2>/dev/null; then
          echo "✅ Using existing bucket: $S3_BUCKET_NAME"
        else
          echo "📦 Creating new bucket: $S3_BUCKET_NAME"
          aws s3api create-bucket \
            --bucket $S3_BUCKET_NAME \
            --region $AWS_REGION \
            --create-bucket-configuration LocationConstraint=$AWS_REGION
          
          # Configure bucket for static website hosting
          aws s3api put-bucket-website \
            --bucket $S3_BUCKET_NAME \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "index.html"}
            }'
          
          echo "🌐 Configured static website hosting"
        fi
        
        # Configure public access
        echo "🔓 Configuring public access..."
        aws s3api put-public-access-block \
          --bucket $S3_BUCKET_NAME \
          --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
        
        # Apply bucket policy for public read access
        aws s3api put-bucket-policy \
          --bucket $S3_BUCKET_NAME \
          --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$S3_BUCKET_NAME'/*"
              }
            ]
          }'
        
        # Deploy files to S3
        echo "📤 Syncing files to S3..."
        aws s3 sync out/ s3://$S3_BUCKET_NAME --delete --region $AWS_REGION
        
        # Set website URL
        WEBSITE_URL="http://$S3_BUCKET_NAME.s3-website.$AWS_REGION.amazonaws.com"
        echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV
        echo "✅ Frontend deployed to: $WEBSITE_URL"

    - name: Test deployment
      run: |
        echo "🧪 Testing frontend deployment..."
        
        # Test main page accessibility
        echo "Testing main page..."
        response=$(curl -s -w "%{http_code}" "$WEBSITE_URL")
        http_code=$(echo "$response" | tail -c 4)
        
        if [ "$http_code" = "200" ]; then
          echo "✅ Frontend is accessible (HTTP 200)"
        else
          echo "❌ Frontend accessibility test failed (HTTP $http_code)"
          exit 1
        fi
        
        # Check if it contains expected content
        if echo "$response" | grep -q "Modulus"; then
          echo "✅ Frontend contains expected content"
        else
          echo "⚠️  Frontend may not contain expected Modulus content"
        fi
        
        # Test if critical pages exist
        echo "Testing additional pages..."
        for page in "register" "login"; do
          page_response=$(curl -s -w "%{http_code}" "$WEBSITE_URL/$page")
          page_code=$(echo "$page_response" | tail -c 4)
          if [ "$page_code" = "200" ] || [ "$page_code" = "404" ]; then
            echo "✅ /$page endpoint responding"
          else
            echo "⚠️  /$page endpoint issue (HTTP $page_code)"
          fi
        done

    - name: Validate build artifacts
      run: |
        echo "🔍 Validating build artifacts..."
        
        # Check for critical files in S3
        if aws s3 ls s3://$S3_BUCKET_NAME/index.html >/dev/null 2>&1; then
          echo "✅ index.html found in S3"
        else
          echo "❌ index.html missing from S3"
          exit 1
        fi
        
        # Check for JS and CSS files
        js_files=$(aws s3 ls s3://$S3_BUCKET_NAME/_next/static/ --recursive | grep ".js" | wc -l)
        css_files=$(aws s3 ls s3://$S3_BUCKET_NAME/_next/static/ --recursive | grep ".css" | wc -l)
        
        echo "📄 JS files deployed: $js_files"
        echo "🎨 CSS files deployed: $css_files"
        
        if [ "$js_files" -gt 0 ] && [ "$css_files" -gt 0 ]; then
          echo "✅ Static assets properly deployed"
        else
          echo "⚠️  Some static assets may be missing"
        fi

    - name: Output deployment summary
      run: |
        echo ""
        echo "🎉 FRONTEND DEPLOYMENT COMPLETED!"
        echo "================================="
        echo ""
        echo "🌐 Website URL: $WEBSITE_URL"
        echo "📦 S3 Bucket: $S3_BUCKET_NAME"
        echo "🔗 API URL: $NEXT_PUBLIC_API_URL"
        echo "📍 Region: $AWS_REGION"
        echo ""
        echo "📋 Quick Test Commands:"
        echo "  curl $WEBSITE_URL"
        echo "  curl $NEXT_PUBLIC_API_URL/health"
        echo ""
        echo "🔧 Next Steps:"
        echo "  1. Visit $WEBSITE_URL to test the application"
        echo "  2. Try registering with different user roles"
        echo "  3. Test the admin dashboard functionality"
        echo "  4. Verify API connectivity"
