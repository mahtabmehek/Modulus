name: Modulus Backend Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/modulus-backend-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  LAMBDA_FUNCTION_NAME: modulus-backend
  API_GATEWAY_NAME: modulus-api

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run tests
      run: |
        cd backend
        echo "üß™ Running backend tests..."
        npm test || echo "‚ö†Ô∏è  No tests found or tests failed"

    - name: Validate backend structure
      run: |
        cd backend
        echo "üîç Validating backend structure..."
        
        # Check required files
        required_files=("server.js" "lambda.js" "db.js" "schema.sql" "package.json")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found $file"
          else
            echo "‚ùå Missing $file"
            exit 1
          fi
        done
        
        # Check route files
        route_files=("routes/auth.js" "routes/admin.js" "routes/courses.js" "routes/users.js" "routes/health.js")
        for file in "${route_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Found $file"
          else
            echo "‚ùå Missing $file"
            exit 1
          fi
        done

    - name: Validate critical endpoints
      run: |
        cd backend
        echo "üîç Validating critical endpoints..."
        
        # Check auth routes
        auth_checks=(
          "router.post('/register'"
          "router.post('/login'"
          "validateRegistration"
          "ROLE_ACCESS_CODES"
        )
        
        for check in "${auth_checks[@]}"; do
          if grep -q "$check" routes/auth.js; then
            echo "‚úÖ Auth: $check found"
          else
            echo "‚ùå Auth: $check missing"
            exit 1
          fi
        done
        
        # Check admin routes
        admin_checks=(
          "router.get('/users'"
          "router.post('/approve'"
          "router.post('/create-user'"
        )
        
        for check in "${admin_checks[@]}"; do
          if grep -q "$check" routes/admin.js; then
            echo "‚úÖ Admin: $check found"
          else
            echo "‚ùå Admin: $check missing"
            exit 1
          fi
        done
        
        # Check course routes
        course_checks=(
          "router.get('/'"
          "router.post('/'"
          "router.put('/:id'"
          "router.delete('/:id'"
        )
        
        for check in "${course_checks[@]}"; do
          if grep -q "$check" routes/courses.js; then
            echo "‚úÖ Courses: $check found"
          else
            echo "‚ùå Courses: $check missing"
            exit 1
          fi
        done

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}
      lambda-arn: ${{ steps.deploy-lambda.outputs.lambda-arn }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install production dependencies
      run: |
        cd backend
        npm ci --production

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create optimized deployment package
      run: |
        cd backend
        echo "üì¶ Creating optimized deployment package..."
        
        # Clean up development artifacts
        rm -rf node_modules/.cache
        rm -rf coverage/
        rm -rf *.log
        rm -f .env.example
        
        # Create deployment package
        zip -r ../backend-deployment.zip . \
          -x "*.git*" "test/*" "*.test.js" "coverage/*" \
          "*.md" "Dockerfile*" "*.log" ".env.example"
        
        cd ..
        package_size=$(stat -f%z backend-deployment.zip 2>/dev/null || stat -c%s backend-deployment.zip)
        echo "üìè Package size: $(echo "scale=2; $package_size/1024/1024" | bc)MB"
        
        # Verify package contents
        echo "üìã Package contents preview:"
        unzip -l backend-deployment.zip | head -20

    - name: Setup AWS IAM role for Lambda
      run: |
        echo "üîß Setting up Lambda execution role..."
        
        # Check if role exists
        if aws iam get-role --role-name lambda-execution-role >/dev/null 2>&1; then
          echo "‚úÖ Lambda execution role already exists"
        else
          echo "üÜï Creating Lambda execution role..."
          aws iam create-role \
            --role-name lambda-execution-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          # Attach required policies
          aws iam attach-role-policy \
            --role-name lambda-execution-role \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            
          aws iam attach-role-policy \
            --role-name lambda-execution-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
          
          # Wait for role propagation
          echo "‚è≥ Waiting for role to propagate..."
          sleep 15
        fi

    - name: Deploy Lambda function
      id: deploy-lambda
      run: |
        echo "üöÄ Deploying Lambda function..."
        
        ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role"
        
        # Prepare environment variables
        ENV_VARS='{
          "NODE_ENV":"production",
          "DB_HOST":"${{ secrets.DB_HOST }}",
          "DB_USER":"${{ secrets.DB_USER }}",
          "DB_PASSWORD":"${{ secrets.DB_PASSWORD }}",
          "DB_NAME":"${{ secrets.DB_NAME }}",
          "JWT_SECRET":"${{ secrets.JWT_SECRET }}"
        }'
        
        # Check if function exists
        if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME >/dev/null 2>&1; then
          echo "üîÑ Updating existing Lambda function..."
          
          # Update function code
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --zip-file fileb://backend-deployment.zip
          
          # Update configuration
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --runtime nodejs18.x \
            --handler lambda.handler \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables="$ENV_VARS"
          
          echo "‚úÖ Lambda function updated"
        else
          echo "üÜï Creating new Lambda function..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --runtime nodejs18.x \
            --role $ROLE_ARN \
            --handler lambda.handler \
            --zip-file fileb://backend-deployment.zip \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables="$ENV_VARS" \
            --description "Modulus LMS Backend API"
          
          echo "‚úÖ Lambda function created"
        fi
        
        # Get Lambda ARN
        LAMBDA_ARN=$(aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)
        echo "lambda-arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT
        echo "üìç Lambda ARN: $LAMBDA_ARN"

    - name: Setup API Gateway
      id: setup-api-gateway
      run: |
        echo "üåê Setting up API Gateway..."
        
        # Check if API exists
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$API_GATEWAY_NAME'].id" --output text)
        
        if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
          echo "üÜï Creating new API Gateway..."
          API_ID=$(aws apigateway create-rest-api \
            --name $API_GATEWAY_NAME \
            --description "Modulus LMS Backend API" \
            --endpoint-configuration types=REGIONAL \
            --query 'id' \
            --output text)
          echo "üìç Created API Gateway: $API_ID"
        else
          echo "‚úÖ Using existing API Gateway: $API_ID"
        fi
        
        # Get root resource
        ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[?path==`/`].id' --output text)
        
        # Create proxy resource if it doesn't exist
        PROXY_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[?pathPart==`{proxy+}`].id' --output text)
        
        if [ -z "$PROXY_ID" ] || [ "$PROXY_ID" = "None" ]; then
          echo "üîó Creating proxy resource..."
          PROXY_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part '{proxy+}' \
            --query 'id' \
            --output text)
        fi
        
        # Setup ANY method
        aws apigateway put-method \
          --rest-api-id $API_ID \
          --resource-id $PROXY_ID \
          --http-method ANY \
          --authorization-type NONE \
          --region $AWS_REGION || true
        
        # Setup Lambda integration
        LAMBDA_ARN="${{ steps.deploy-lambda.outputs.lambda-arn }}"
        aws apigateway put-integration \
          --rest-api-id $API_ID \
          --resource-id $PROXY_ID \
          --http-method ANY \
          --type AWS_PROXY \
          --integration-http-method POST \
          --uri "arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations" \
          --region $AWS_REGION || true
        
        # Grant API Gateway permission to invoke Lambda
        aws lambda add-permission \
          --function-name $LAMBDA_FUNCTION_NAME \
          --statement-id apigateway-invoke-$(date +%s) \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:$API_ID/*/*" \
          --region $AWS_REGION || true
        
        # Deploy API
        aws apigateway create-deployment \
          --rest-api-id $API_ID \
          --stage-name prod \
          --stage-description "Production deployment $(date)" \
          --description "Automated deployment from GitHub Actions"
        
        API_URL="https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/prod/api"
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "üåê API Gateway URL: $API_URL"

    - name: Get API URL
      id: get-api-url
      run: |
        API_URL="${{ steps.setup-api-gateway.outputs.api-url }}"
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT

  test-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Test API health
      run: |
        echo "üè• Testing API health..."
        API_URL="${{ needs.deploy.outputs.api-url }}"
        
        # Wait for API to be ready
        echo "‚è≥ Waiting for API to be ready..."
        sleep 10
        
        # Test health endpoint
        response=$(curl -s -w "%{http_code}" "$API_URL/health")
        http_code=$(echo "$response" | tail -c 4)
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Health check passed"
          echo "Response: $(echo "$response" | head -c 200)"
        else
          echo "‚ùå Health check failed (HTTP $http_code)"
          echo "Response: $response"
          exit 1
        fi

    - name: Test authentication endpoints
      run: |
        echo "üîê Testing authentication endpoints..."
        API_URL="${{ needs.deploy.outputs.api-url }}"
        
        # Test registration endpoint structure
        echo "Testing registration endpoint..."
        reg_response=$(curl -s -w "%{http_code}" -X POST "$API_URL/auth/register" \
          -H "Content-Type: application/json" \
          -d '{"test": "structure"}')
        reg_code=$(echo "$reg_response" | tail -c 4)
        
        if [ "$reg_code" = "400" ] || [ "$reg_code" = "422" ]; then
          echo "‚úÖ Registration endpoint responding correctly to invalid data"
        else
          echo "‚ö†Ô∏è  Registration endpoint response: HTTP $reg_code"
        fi
        
        # Test login endpoint structure
        echo "Testing login endpoint..."
        login_response=$(curl -s -w "%{http_code}" -X POST "$API_URL/auth/login" \
          -H "Content-Type: application/json" \
          -d '{"test": "structure"}')
        login_code=$(echo "$login_response" | tail -c 4)
        
        if [ "$login_code" = "400" ] || [ "$login_code" = "422" ]; then
          echo "‚úÖ Login endpoint responding correctly to invalid data"
        else
          echo "‚ö†Ô∏è  Login endpoint response: HTTP $login_code"
        fi

    - name: Test admin endpoints
      run: |
        echo "üëë Testing admin endpoints..."
        API_URL="${{ needs.deploy.outputs.api-url }}"
        
        # Test users endpoint (should require auth)
        users_response=$(curl -s -w "%{http_code}" "$API_URL/admin/users")
        users_code=$(echo "$users_response" | tail -c 4)
        
        if [ "$users_code" = "401" ] || [ "$users_code" = "403" ]; then
          echo "‚úÖ Admin users endpoint properly protected"
        else
          echo "‚ö†Ô∏è  Admin users endpoint response: HTTP $users_code"
        fi

    - name: Test course endpoints
      run: |
        echo "üìö Testing course endpoints..."
        API_URL="${{ needs.deploy.outputs.api-url }}"
        
        # Test courses listing
        courses_response=$(curl -s -w "%{http_code}" "$API_URL/courses")
        courses_code=$(echo "$courses_response" | tail -c 4)
        
        if [ "$courses_code" = "200" ] || [ "$courses_code" = "401" ]; then
          echo "‚úÖ Courses endpoint responding"
        else
          echo "‚ö†Ô∏è  Courses endpoint response: HTTP $courses_code"
        fi

  deployment-summary:
    needs: [deploy, test-deployment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Backend Deployment Summary
      run: |
        echo ""
        echo "üöÄ BACKEND DEPLOYMENT SUMMARY"
        echo "============================="
        echo ""
        echo "üîó API URL: ${{ needs.deploy.outputs.api-url }}"
        echo "‚ö° Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "üåê API Gateway: ${{ env.API_GATEWAY_NAME }}"
        echo "üìç Region: ${{ env.AWS_REGION }}"
        echo "üì¶ Lambda ARN: ${{ needs.deploy.outputs.lambda-arn }}"
        echo ""
        echo "üîß Available Endpoints:"
        echo "  - Health: GET /api/health"
        echo "  - Register: POST /api/auth/register"
        echo "  - Login: POST /api/auth/login"
        echo "  - Admin Users: GET /api/admin/users"
        echo "  - User Approval: POST /api/admin/approve/:id"
        echo "  - Courses: GET /api/courses"
        echo "  - Create Course: POST /api/courses"
        echo ""
        echo "‚úÖ Deployment Status:"
        echo "  - Backend Deploy: ${{ needs.deploy.result }}"
        echo "  - API Tests: ${{ needs.test-deployment.result }}"
        echo ""
        echo "üß™ Quick Test Commands:"
        echo "  curl ${{ needs.deploy.outputs.api-url }}/health"
        echo "  curl -X POST ${{ needs.deploy.outputs.api-url }}/auth/register \\"
        echo "    -H 'Content-Type: application/json' \\"
        echo "    -d '{\"name\":\"Test\",\"email\":\"test@modulus.edu\",\"password\":\"TestPass123!\",\"role\":\"student\",\"accessCode\":\"STUDENT2024\"}'"
        echo ""
        if [ "${{ needs.test-deployment.result }}" = "success" ]; then
          echo "üéâ Backend is operational and ready for frontend connection!"
        else
          echo "‚ö†Ô∏è  Some tests failed - check logs for details"
        fi
