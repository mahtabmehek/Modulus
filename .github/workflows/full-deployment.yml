name: Full Stack Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean
      test_seed:
        description: 'Test seed endpoint after deployment'
        required: false
        default: true
        type: boolean

jobs:
  deploy-backend:
    if: github.event.inputs.deploy_backend != 'false'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Validate backend structure
      run: |
        cd backend
        echo "Validating backend structure..."
        
        # Check required files
        for file in "server.js" "lambda.js" "routes/admin.js" "routes/auth.js" "routes/courses.js" "routes/users.js" "routes/health.js"; do
          if [ -f "$file" ]; then
            echo "✅ Found $file"
          else
            echo "❌ Missing $file"
            exit 1
          fi
        done
        
        # Check for critical routes
        if grep -q "router.post('/register'" routes/auth.js; then
          echo "✅ /register route found in auth.js"
        else
          echo "❌ /register route NOT found in auth.js"
          exit 1
        fi
        
        if grep -q "router.post('/login'" routes/auth.js; then
          echo "✅ /login route found in auth.js"
        else
          echo "❌ /login route NOT found in auth.js"
          exit 1
        fi
        
        if grep -q "router.get('/users'" routes/admin.js; then
          echo "✅ /users route found in admin.js"
        else
          echo "❌ /users route NOT found in admin.js"
          exit 1
        fi
        
        if grep -q "router.post('/courses'" routes/courses.js; then
          echo "✅ /courses route found in courses.js"
        else
          echo "❌ /courses route NOT found in courses.js"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Create deployment package
      run: |
        cd backend
        zip -r ../backend-deployment.zip . -x "*.git*" "*node_modules*" "*.log*"
        cd ..
        ls -la backend-deployment.zip

    - name: Create Lambda execution role
      run: |
        aws iam get-role --role-name lambda-execution-role || \
        aws iam create-role --role-name lambda-execution-role --assume-role-policy-document '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }'
        
        aws iam attach-role-policy --role-name lambda-execution-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true

    - name: Deploy Lambda function
      run: |
        if aws lambda get-function --function-name modulus-backend 2>/dev/null; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name modulus-backend \
            --zip-file fileb://backend-deployment.zip \
            --region eu-west-2
          
          aws lambda update-function-configuration \
            --function-name modulus-backend \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables="{
              NODE_ENV=production,
              DB_HOST=${{ secrets.DB_HOST }},
              DB_PORT=${{ secrets.DB_PORT }},
              DB_NAME=${{ secrets.DB_NAME }},
              DB_USER=${{ secrets.DB_USER }},
              DB_PASSWORD=${{ secrets.DB_PASSWORD }},
              JWT_SECRET=${{ secrets.JWT_SECRET }},
              FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            }"
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
            --function-name modulus-backend \
            --runtime nodejs18.x \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
            --handler lambda.handler \
            --zip-file fileb://backend-deployment.zip \
            --timeout 30 \
            --memory-size 512 \
            --region eu-west-2 \
            --environment Variables="{
              NODE_ENV=production,
              DB_HOST=${{ secrets.DB_HOST }},
              DB_PORT=${{ secrets.DB_PORT }},
              DB_NAME=${{ secrets.DB_NAME }},
              DB_USER=${{ secrets.DB_USER }},
              DB_PASSWORD=${{ secrets.DB_PASSWORD }},
              JWT_SECRET=${{ secrets.JWT_SECRET }},
              FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            }"
        fi

    - name: Setup API Gateway
      run: |
        API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`modulus-api`].id' --output text)
        
        if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
          echo "Creating new API Gateway..."
          API_ID=$(aws apigateway create-rest-api \
            --name modulus-api \
            --description "Modulus LMS Backend API" \
            --query 'id' \
            --output text)
          echo "Created API Gateway with ID: $API_ID"
        else
          echo "Using existing API Gateway with ID: $API_ID"
        fi
        
        # Get root resource ID
        ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[?path==`/`].id' --output text)
        
        # Create proxy resource if it doesn't exist
        PROXY_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query 'items[?pathPart==`{proxy+}`].id' --output text)
        
        if [ -z "$PROXY_ID" ] || [ "$PROXY_ID" = "None" ]; then
          echo "Creating proxy resource..."
          PROXY_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part '{proxy+}' \
            --query 'id' \
            --output text)
        fi
        
        # Create ANY method and integration
        aws apigateway put-method \
          --rest-api-id $API_ID \
          --resource-id $PROXY_ID \
          --http-method ANY \
          --authorization-type NONE \
          --region eu-west-2 || true
        
        aws apigateway put-integration \
          --rest-api-id $API_ID \
          --resource-id $PROXY_ID \
          --http-method ANY \
          --type AWS_PROXY \
          --integration-http-method POST \
          --uri "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:${{ secrets.AWS_ACCOUNT_ID }}:function:modulus-backend/invocations" \
          --region eu-west-2 || true
        
        # Grant permission
        aws lambda add-permission \
          --function-name modulus-backend \
          --statement-id apigateway-invoke \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:eu-west-2:${{ secrets.AWS_ACCOUNT_ID }}:$API_ID/*/*" \
          --region eu-west-2 || true
        
        # Deploy API
        aws apigateway create-deployment \
          --rest-api-id $API_ID \
          --stage-name prod \
          --region eu-west-2
        
        echo "API_ID=$API_ID" >> $GITHUB_ENV

    - name: Get API URL
      id: get-api-url
      run: |
        API_URL="https://$API_ID.execute-api.eu-west-2.amazonaws.com/prod/api"
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API_URL=$API_URL" >> $GITHUB_ENV

    - name: Test backend deployment
      run: |
        echo "Testing backend deployment..."
        sleep 15
        
        echo "Testing endpoints on: $API_URL"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f -s "$API_URL/health" | jq . || echo "⚠️  Health check failed"
        
        # Test status endpoint
        echo "Testing status endpoint..."
        curl -f -s "$API_URL/status" | jq . || echo "⚠️  Status check failed"
        
        # Test database health
        echo "Testing database health..."
        curl -f -s "$API_URL/health/db" | jq . || echo "⚠️  Database health check failed"

    - name: Test seed endpoint
      if: github.event.inputs.test_seed != 'false'
      run: |
        echo "Testing seed endpoint..."
        response=$(curl -s "$API_URL/admin/seed")
        echo "Seed response: $response"
        
        if echo "$response" | jq -e '.users' > /dev/null 2>&1; then
          echo "✅ Seed endpoint working correctly"
          echo "$response" | jq '.users | length' | xargs -I {} echo "Created {} users"
        else
          echo "⚠️  Seed endpoint response unexpected"
          echo "$response"
        fi

    - name: Output backend info
      run: |
        echo "🚀 Backend deployment completed!"
        echo "📡 API Gateway URL: $API_URL"
        echo "🔍 Health Check: $API_URL/health"
        echo "🌱 Seed Endpoint: $API_URL/admin/seed"

  deploy-frontend:
    if: github.event.inputs.deploy_frontend != 'false'
    needs: deploy-backend
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Set API URL
      run: |
        if [ -n "${{ needs.deploy-backend.outputs.api-url }}" ]; then
          echo "NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.api-url }}" >> $GITHUB_ENV
        else
          # Fallback to get API URL from existing deployment
          API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`modulus-api`].id' --output text)
          if [ -n "$API_ID" ] && [ "$API_ID" != "None" ]; then
            echo "NEXT_PUBLIC_API_URL=https://$API_ID.execute-api.eu-west-2.amazonaws.com/prod/api" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_API_URL=https://api.modulus.com/api" >> $GITHUB_ENV
          fi
        fi

    - name: Build frontend
      run: |
        echo "Building with API URL: $NEXT_PUBLIC_API_URL"
        npm run build
        
        if [ ! -d "out" ]; then
          echo "❌ Build failed - no 'out' directory found"
          exit 1
        fi
        
        echo "✅ Build successful"

    - name: Deploy to S3
      run: |
        # Use existing bucket or create new one
        BUCKET_NAME="modulus-frontend-$(date +%Y%m%d)"
        
        if aws s3api head-bucket --bucket modulus-frontend-1752085873 2>/dev/null; then
          BUCKET_NAME="modulus-frontend-1752085873"
        else
          aws s3api create-bucket \
            --bucket $BUCKET_NAME \
            --region eu-west-2 \
            --create-bucket-configuration LocationConstraint=eu-west-2
          
          aws s3api put-bucket-website \
            --bucket $BUCKET_NAME \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "404.html"}
            }'
        fi
        
        # Configure bucket permissions
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
        
        aws s3api put-bucket-policy \
          --bucket $BUCKET_NAME \
          --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
              }
            ]
          }'
        
        # Deploy files
        aws s3 sync out/ s3://$BUCKET_NAME --delete --region eu-west-2
        
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

    - name: Setup CloudFront
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[?Comment==`Modulus LMS Frontend`].Id' --output text)
        
        if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
          echo "Creating CloudFront distribution..."
          DISTRIBUTION_ID=$(aws cloudfront create-distribution \
            --distribution-config '{
              "CallerReference": "'$(date +%s)'",
              "Comment": "Modulus LMS Frontend",
              "DefaultCacheBehavior": {
                "TargetOriginId": "S3-'$BUCKET_NAME'",
                "ViewerProtocolPolicy": "redirect-to-https",
                "MinTTL": 0,
                "ForwardedValues": {
                  "QueryString": false,
                  "Cookies": {"Forward": "none"}
                },
                "TrustedSigners": {
                  "Enabled": false,
                  "Quantity": 0
                }
              },
              "Origins": {
                "Quantity": 1,
                "Items": [
                  {
                    "Id": "S3-'$BUCKET_NAME'",
                    "DomainName": "'$BUCKET_NAME'.s3-website.eu-west-2.amazonaws.com",
                    "CustomOriginConfig": {
                      "HTTPPort": 80,
                      "HTTPSPort": 443,
                      "OriginProtocolPolicy": "http-only"
                    }
                  }
                ]
              },
              "Enabled": true,
              "PriceClass": "PriceClass_100"
            }' \
            --query 'Distribution.Id' \
            --output text)
        fi
        
        echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

    - name: Test frontend deployment
      run: |
        DISTRIBUTION_URL=$(aws cloudfront get-distribution --id $DISTRIBUTION_ID --query 'Distribution.DomainName' --output text)
        
        echo "Testing frontend deployment..."
        echo "S3 Website: http://$BUCKET_NAME.s3-website.eu-west-2.amazonaws.com"
        echo "CloudFront: https://$DISTRIBUTION_URL"
        
        # Test S3 website
        curl -f -s "http://$BUCKET_NAME.s3-website.eu-west-2.amazonaws.com" | head -20 || echo "⚠️  S3 website test failed"

    - name: Output deployment info
      run: |
        DISTRIBUTION_URL=$(aws cloudfront get-distribution --id $DISTRIBUTION_ID --query 'Distribution.DomainName' --output text)
        
        echo "🚀 Full deployment completed!"
        echo "📦 S3 Bucket: $BUCKET_NAME"
        echo "🌐 S3 Website: http://$BUCKET_NAME.s3-website.eu-west-2.amazonaws.com"
        echo "⚡ CloudFront: https://$DISTRIBUTION_URL"
        echo "🔗 API URL: $NEXT_PUBLIC_API_URL"
        echo "🌱 Seed Endpoint: $NEXT_PUBLIC_API_URL/admin/seed"
